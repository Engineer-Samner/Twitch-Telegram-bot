const axios = require('axios');
const { Input } = require('telegraf');

const { log } = require('./log.js');

/**
 * –ü–∞—Ä—Å–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
 * @param {string} channelusername –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \@rssbridge –∏–ª–∏ rssbridge)
 * @param {string} domain –¥–æ–º–µ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - rss-bridge.org/bridge01
 * @param {Number} cache_timeout —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns
 */
async function parseTelegramPost(channelname, domain = 'rss-bridge.org/bridge01', cache_timeout = 60) {
    if (!channelname)
        throw Error('–∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ');

    try {
        const name = channelname.replace('@', '');
        const url = `http://${domain}/?action=display&username=${name}&bridge=TelegramBridge&_cache_timeout=${cache_timeout}&format=Json`;

        const response = await axios.get(url);
        const data = response.data;
        const post = data.items[0];
        const desc = post.content_html || '';
        const link = post.url || '';
        const urls = [...await parseVideoTelegram(desc), ...await parseImageTelegram(desc)];
        const text = await parseTextTelegram(desc, link);
        return {
            link: link,
            media: urls,
            text: text
        }
    } catch (error) {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞', ':', error.message);
        return undefined;
    }
}

async function getMedia(media) {
    try {
        let urls = [];
        let res;

        if(media.length === 0) return [];

        for (let mediaUrl of media) {
            res = await axios.get(mediaUrl[1], { responseType: 'stream' });
            urls.push([mediaUrl[0], Input.fromReadableStream(res.data)]);
        }

        return urls;
    }
    catch (error) {
        log('‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞:', error.message);
        return [];
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—Å–µ –≤–∏–¥–µ–æ
 * @param {*} postText —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –∏–∑ description
 */
async function parseVideoTelegram(postText) {
    try {
        const urls = [];
        let match;

        // –ò—â–µ–º –≤–∏–¥–µ–æ
        const vidTagRegex = /<video\s+[^>]*src=["']([^"']+)["'][^>]*>/gi;
        while ((match = vidTagRegex.exec(postText)) !== null) {
            urls.push(['video', match[1]]);
        }

        const vidTagSrcRegex = /<source\s+src=["'](.*?)["'] type=["']video\/mp4["']>/gi;
        while ((match = vidTagSrcRegex.exec(postText)) !== null) {
            urls.push(['video', match[1]]);
        }

        return urls;
    }
    catch (error) {
        log('‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ URL-–∞–¥—Ä–µ—Å–∞ –≤–∏–¥–µ–æ:', error.message);
        return undefined;
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—Å–µ —Ñ–æ—Ç–æ
 * @param {*} postText —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –∏–∑ description
 */
async function parseImageTelegram(postText) {
    try {
        const urls = [];
        let match;

        // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imgTagRegex = /<img\s+[^>]*src=["']([^"']+)["'][^>]*>/gi;
        while ((match = imgTagRegex.exec(postText)) !== null) {
            urls.push(['photo', match[1]]);
        }

        console.log(urls);

        return urls;
    }
    catch (error) {
        log('‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ URL-–∞–¥—Ä–µ—Å–∞ —Ñ–æ—Ç–æ:', error.message);
        return undefined
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–µ–≥–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–µ—Ç—Å—è, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @param {*} postText —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –∏–∑ description
 * @param {string} postLink —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
 * @returns 
 */
async function parseTextTelegram(postText, postLink = '') {
    try {
        // if(postText.search(/<div\sclass="message_media_not_supported">/g) !== -1)
        //     return `–ù–æ–≤—ã–π –ø–æ—Å—Ç: ${postLink}`;

        let text = postText.replace(/<br\/?>/g, '\n'); // –ó–∞–º–µ–Ω–∞ —Ç–µ–≥–∞ br –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–µ–≥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ div
        const pMatches = text.match(/<div\sclass="tgme_widget_message_text\sjs-message_text"\sdir="auto">.*?<\/div>/gs);
        const pText = pMatches ? pMatches.map(match => match.replace(/<\/?div.*?>/g, '').replace(/<\/?(i|b)(\sclass="emoji".*?)?>/g, '')) : '';

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
        text = text.replace(/<\/?.*?>/g, '');

        // –ï—Å–ª–∏ –±—ã–ª —Ç–µ–≥ <div>, –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = pText || text;

        if (postLink !== '')
            text += `\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${postLink}`;

        return text;
    }
    catch (error) {
        log('‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞:', error.message);
        return undefined;
    }
}

module.exports = { parseTelegramPost, getMedia };

if (require.main === module) {
    (async () => {
        try {
            const object = await parseTelegramPost('dvachannel', '127.0.0.1:3000');
        } catch (error) {
            log('‚ùå–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
    })();
}