const { Telegraf } = require('telegraf');
const fs = require('fs');
const axios = require('axios');

const { log, getDate, writeToFile } = require('./scripts/log.js');
const { parseTelegramPost, getMedia } = require('./scripts/rss.js');
const { streamStatus, getAccessToken, getUserId, getLatestClip } = require('./scripts/twitch.js');
const { updateEnvVariable } = require('./scripts/env.js');
const { checkToken } = require('./scripts/token.js');
const path = require('path');

require('dotenv').config();
const {
    BOT_TOKEN,                      // –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    OWNER_ID                        // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
} = process.env;

let {
    CHAT_ID,                        // ID —á–∞—Ç–∞
    TYPE_CHAT,                      // –¢–∏–ø —á–∞—Ç–∞
    THREAD_ALERTS_ID,               // ID –ø–æ—Ç–æ–∫–∞ —á–∞—Ç–∞-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    THREAD_NEWS_ID,                 // ID –ø–æ—Ç–æ–∫–∞ —á–∞—Ç–∞-–Ω–æ–≤–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    THREAD_CLIPS_ID,
    TELEGRAM_CHANNEL,               // –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
    DOMAIN,                         // URL-–∞–¥—Ä–µ—Å RSS
    TWITCH_USERNAME,                // –ò–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞
    CLIENT_ID,                      // ID –∫–ª–∏–µ–Ω—Ç–∞
    CLIENT_SECRET                   // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
} = process.env;

const LAST_POST_FILE = 'last_post.txt'; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
const LAST_CLIP_FILE = 'last_clip.txt'; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–ø–∞
const ALERTS_MESSAGE_FILE = 'alerts_mes.txt' // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞

let lastPost = undefined;
let lastClip = undefined;
let wasLive = false;
let accessToken = '';
let userId = null;
let mesAlerts = '';
let processNews = undefined;
let processAlerts = undefined;
let processClips = undefined;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞
let action = 'cancel';
let chatid = null;
let client_id = '';
let phrase = '';
let threadId = '';

if (require.main === module) {
    if(!checkToken(BOT_TOKEN)){
        setTimeout(() => { }, 10000);
        return;
    }
}

const bot = new Telegraf(BOT_TOKEN);

process.on('uncaughtException', (err) => {
    log('‚ùå–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ', err);
    if (bot)
        bot.telegram.sendMessage(OWNER_ID, `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
});

// –ß–∏—Ç–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
function loadLastData(filename) {
    try {
        if (fs.existsSync(`./data/others/${filename}`)) {
            return fs.readFileSync(`./data/others/${filename}`, 'utf8').trim();
        }
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}: `, error.message);
    }
    return null;
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Ñ–∞–π–ª
function saveLastData(filename, data) {
    try {
        if (fs.existsSync(`./data/others/${filename}`))
            fs.unlinkSync(`./data/others/${filename}`);
        writeToFile('/data/others/', filename, data);
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª ${filename}: `, error.message);
    }
}

async function checkNewPost() {
    try {
        const object = await parseTelegramPost(TELEGRAM_CHANNEL, DOMAIN);
        const numLink = object?.link.split('/')[object.link.split('/').length - 1];

        if (isNaN(numLink) || lastPost >= numLink) return;

        const media = await getMedia(object.media);

        if (!await forwardLastPost(object.text, media, object.link)) return;
        lastPost = numLink;
        saveLastData(LAST_POST_FILE, lastPost);
    }
    catch (error) {
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–æ–≤:", error.message);
    }
}

async function checkStream() {
    try {
        const isLive = await streamStatus(userId, CLIENT_ID, accessToken) ?? wasLive;
        if (isLive && !wasLive) {
            await sendAlertsMessage(mesAlerts);
            wasLive = true;
            log('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç', CHAT_ID, '–ø–æ—Ç–æ–∫', THREAD_ALERTS_ID);
        }
        else if (!isLive && wasLive) {
            wasLive = false;
        }
    }
    catch (err) {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–∞:', err.message);
    }
}

async function checkNewClip() {
    try {
        const object = await getLatestClip(userId, CLIENT_ID, accessToken);
        const create_date = object?.create_date;

        if (Number(lastClip) >= create_date || !object) return;

        bot.telegram.sendMessage(CHAT_ID,
            `–ö–ª–∏–ø: <a href="${object.url}">${object.title}</a>\n–ê–≤—Ç–æ—Ä: ${object.creator}`,
            {
                parse_mode: 'HTML',
                message_thread_id: THREAD_CLIPS_ID,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–°–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∏–ø', url: object.url }]
                    ]
                }
            }
        )
        lastClip = create_date.toString();
        saveLastData(LAST_CLIP_FILE, lastClip);
        log(`–ö–ª–∏–ø "${object.title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${CHAT_ID} –ø–æ—Ç–æ–∫ ${THREAD_CLIPS_ID}`);
    }
    catch (err) {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–ø–∞:', err.message);
    }
}

async function sendAlertsMessage(text = undefined) {
    const message = text ?? `–ü—Ä–∏–≤–µ—Ç! ${TWITCH_USERNAME} –Ω–∞—á–∞–ª(a) —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é.\n`;
    try {
        await bot.telegram.sendMessage(CHAT_ID, message,
            {
                parse_mode: 'HTML',
                message_thread_id: THREAD_ALERTS_ID,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ó–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∏–º', url: `https://www.twitch.tv/${TWITCH_USERNAME}` }]
                    ]
                }
            }
        )
    }
    catch (err) {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err.message);
        return undefined;
    }
}

async function forwardLastPost(text, urls, link) {
    try {
        if (urls.length > 0) {
            // –°–æ–∑–¥–∞–µ–º captions: —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const captions = [text, ...Array(urls.length - 1).fill('')];

            await bot.telegram.sendMediaGroup(
                CHAT_ID,
                urls.map((url, index) => ({
                    type: url[0],
                    media: url[1],
                    caption: captions[index],
                    parse_mode: 'HTML'
                })),
                {
                    message_thread_id: THREAD_NEWS_ID
                }
            );
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.telegram.sendMessage(CHAT_ID, text,
                {
                    parse_mode: 'HTML',
                    message_thread_id: THREAD_NEWS_ID
                }
            );
        }
        log(`–ü–æ—Å—Ç ${link} –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ —á–∞—Ç`, CHAT_ID, ' –ø–æ—Ç–æ–∫:', THREAD_NEWS_ID);
        return true;

    } catch (error) {
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:", error.message);
        return false;
    }
}

function info() {
    const news = checkNews();
    const twitch = checkTwitch();
    const keyboard = [
        !news.ok ? news.button : [],
        !twitch.ok ? twitch.button : [],
    ];
    bot.telegram.sendMessage(OWNER_ID, `–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤: ${news.ok && processNews ? 'üü¢–≤–∫–ª—é—á–µ–Ω' : 'üî¥–æ—Ç–∫–ª—é—á–µ–Ω'}\n` +
        `${news.ok ? '' : news.reason.concat('\n\n') }`+
        `–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö: ${twitch.ok && processAlerts ? 'üü¢–≤–∫–ª—é—á–µ–Ω' : 'üî¥–æ—Ç–∫–ª—é—á–µ–Ω'}\n` +
        `–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤: ${twitch.ok && processClips ? 'üü¢–≤–∫–ª—é—á–µ–Ω' : 'üî¥–æ—Ç–∫–ª—é—á–µ–Ω'}\n` +
        `${twitch.ok ? '' : twitch.reason}`,
        {
            reply_markup: {
                inline_keyboard: keyboard
            }
        }
    );
    return;
}

// ==================== –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç =====================

bot.catch((err) => {
    log('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞:', err.message);
    bot.telegram.sendMessage(OWNER_ID, `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞: ${err.message}`);
});

bot.start(ctx => {

    if (!OWNER_ID) {
        updateEnvVariable('OWNER_ID', ctx.chat.id);
    }
    else if (OWNER_ID != ctx.chat.id) {
        ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
    }
    const username = ctx.update.message.from.first_name || '–¥—Ä—É–≥';
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, ${username}!\n` +
        '–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª –∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂—É –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ —è —É–º–µ—é\n' +
        '<i>- –Ø —É–º–µ—é –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –¥—Ä—É–≥–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤ —á–∞—Ç (–¥–∞–∂–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (—Ç–µ–º—É))</i>\n' +
        '<i>- –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞ –≤ —á–∞—Ç (—Ç–∞–∫–∂–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–∫)</i>\n\n' +
        '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ –≤—Å—ë, —á—Ç–æ —è —É–º–µ—é. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ –º–Ω–µ –∑–∞–ª–æ–∂–µ–Ω—ã',
        {
            parse_mode: 'HTML'
        }
    );
});

bot.help(async ctx => {
    await ctx.reply('/info - –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É\n' +
        '/log - –≤—ã–≤–æ–¥ –ª–æ–≥–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (–Ω–∞—á–∏–Ω–∞—è —Å 00-00)\n' +
        '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ú–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞\n' +
        '/testalerts - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —á–∞—Ç\n' +
        '/testnews - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —á–∞—Ç\n' +
        '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n' +
        '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –µ—Å—Ç—å –∏–∑ –Ω–∞–±–æ—Ä–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—à–∏–±–∫—É, –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @enginrr'
    );
    if (!OWNER_ID)
        await ctx.reply('–ù–∞ —ç—Ç–æ–º –≤—Å—ë, —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—è –¥–ª—è –¥–∞–ª—å—à–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
});

bot.command('info', () => {
    info();
});

bot.command('testalerts', async (ctx) => {
    await sendAlertsMessage(mesAlerts ?? '–ü—Ä–∏–ª–µ—Ç–µ–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å—é–¥–∞');
    ctx.reply('–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    log('–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç', CHAT_ID, '–ø–æ—Ç–æ–∫', THREAD_ALERTS_ID);
});

bot.command('testnews', async (ctx) => {
    await forwardLastPost('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –ø—Ä–∏–ª–µ—Ç–µ–ª —Å—é–¥–∞', [], 'https://testpost');
    ctx.reply('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    log('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç', CHAT_ID, '–ø–æ—Ç–æ–∫', THREAD_NEWS_ID);
});

bot.command('log', async () => {
    const date = getDate();
    const fileLog = `log-${date.year}-${date.month}-${date.day}.txt`;
    try {
        if (!fs.existsSync(`./logs/${fileLog}`)) {
            throw Error('—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        await bot.telegram.sendDocument(OWNER_ID, { source: `logs/${fileLog}` });
        log('–í—ã–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª', fileLog);
    }
    catch (error) {
        bot.telegram.sendMessage(OWNER_ID, `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ${fileLog}: ${error}`);
        log(`‚ùå–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ${fileLog}: ${error}`);
    }
});

bot.command('stop', async ctx => {
    const user_id = ctx.update.message.from.id;
    const username = ctx.update.message.from.first_name;
    let flag = true;
    await bot.telegram.getChatAdministrators(CHAT_ID).then(admins => {
        for (let admin of admins) {
            if (admin.user.id == user_id) {
                ctx.reply('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É');
                bot.telegram.sendMessage(OWNER_ID, `–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.user.first_name}`);
                log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', admin.user.first_name);
                bot.stop('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                flag = false;
                return;
            }
        }
    })
    if (flag) {
        ctx.reply('‚ùå–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞');
        log(username, '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
});


bot.command('settings', ctx => {
    if (ctx.chat.id != OWNER_ID) {
        ctx.reply('‚ùå–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
    }
    ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ß–∞—Ç', callback_data: 'chatsettings' }],
                    [{ text: '–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤', callback_data: 'forward' }, { text: 'Twitch', callback_data: 'twitch' }],
                    // [{ text: '–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞', callback_data: 'botupdate' }]
                ]
            }
        }
    );
});

bot.command('cancel', ctx => {
    action = 'cancel';
    threadId = undefined;
    phrase = '';
    client_id = '';
    chatid = '';
    ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
});

bot.action('settings', ctx => {
    ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ß–∞—Ç', callback_data: 'chatsettings' }],
                    [{ text: '–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤', callback_data: 'forward' }, { text: 'Twitch', callback_data: 'twitch' }],
                    // [{ text: '–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞', callback_data: 'botupdate' }]
                ]
            }
        }
    )
});

// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ =====================

bot.action('forward', ctx => {
    ctx.editMessageText('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤\n\n' +
        `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª: @${TELEGRAM_CHANNEL}\n` +
        `–ê–¥—Ä–µ—Å RSS-bridge: ${DOMAIN}`,
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª', callback_data: 'forward:telegramchannel' }, { text: '–°–º–µ–Ω–∏—Ç—å URL-–∞–¥—Ä–µ—Å RSS-bridge', callback_data: 'forward:rssbridge' }],
                    [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data: 'settings' }]
                ]
            }
        }
    );
});

bot.action(/^forward:(.+)/gi, ctx => {
    const settingType = ctx.match[1];
    switch (settingType) {
        case 'telegramchannel':
            action = 'telegramchanneledit';
            ctx.reply('–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel');
            break;
        case 'rssbridge':
            action = 'rssbridgeedit';
            ctx.reply('–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥—Ä–µ—Å:–ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç <a href=\"https://github.com/RSS-Bridge/rss-bridge/\">RSS-bridge</a>. –ù–∞–ø—Ä–∏–º–µ—Ä, 127.0.0.1:3000\n' +
                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel',
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç', callback_data: 'forward:officialrssbridge' }]
                        ]
                    }
                }
            );
            break;
        case 'officialrssbridge':
            action = 'cancel';
            DOMAIN = 'rss-bridge.org/bridge01';
            updateEnvVariable('DOMAIN', DOMAIN);
            ctx.reply('‚úÖ–ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π');
            log('–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π');
            break;
        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingType}`);
            break;
    }
});

// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤. –ö–æ–Ω–µ—Ü =====================
// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ =====================

bot.action('chatsettings', async ctx => {
    let chat = undefined;
    try {
        chat = await bot.telegram.getChat(CHAT_ID);
    }
    catch {

    }
    ctx.editMessageText('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n\n' +
        `–ß–∞—Ç –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª: ${chat?.title ?? '–ù–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ'}\n` +
        `–ü–æ—Ç–æ–∫ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–µ: ${(isNaN(THREAD_ALERTS_ID) ? undefined : THREAD_ALERTS_ID) ?? '–ù–µ –∑–∞–¥–∞–Ω'}\n` +
        `–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å –∫–∞–Ω–∞–ª–∞ @${TELEGRAM_CHANNEL}: ${(isNaN(THREAD_NEWS_ID) ? undefined : THREAD_NEWS_ID) ?? '–ù–µ –∑–∞–¥–∞–Ω'}\n` +
        `–ü–æ—Ç–æ–∫ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: ${(isNaN(THREAD_CLIPS_ID) ? undefined : THREAD_CLIPS_ID) ?? '–ù–µ –∑–∞–¥–∞–Ω'}`,
        {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤', callback_data: 'chatsettings:threadalerts' }, { text: '–°–º–µ–Ω–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª', callback_data: 'chatsettings:chatchannel' }],
                    [{ text: '–°–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ –ø–æ—Å—Ç–æ–≤', callback_data: 'chatsettings:threadnews' }, { text: '–°–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ –∫–ª–∏–ø–æ–≤', callback_data: 'chatsettings:threadclips' }],
                    [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data: 'settings' }]
                ]
            },
            parse_mode: 'HTML'
        }
    );
});

bot.action(/^chatsettings:chatchannel:(.+)/gi, ctx => {
    const chatType = ctx.match[1];
    switch (chatType) {
        case 'chat':
            action = 'chatedit';
            ctx.reply('–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏ –∏—Å–∫–ª—é—á–∏ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ /cancel\n' +
                '<b>üö®–í–ù–ò–ú–ê–ù–ò–ï!üö®</b>\n' +
                '–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —á–∞—Ç–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ò—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
                {
                    parse_mode: 'HTML'
                }
            );
            break;

        case 'chatedit':
            action = 'cancel';
            updateEnvVariable('CHAT_ID', chatid);
            TYPE_CHAT = 'group';
            updateEnvVariable('TYPE_CHAT', TYPE_CHAT);

            updateEnvVariable('THREAD_ALERTS_ID', undefined);
            updateEnvVariable('THREAD_CLIPS_ID', undefined);
            updateEnvVariable('THREAD_NEWS_ID', undefined);
            THREAD_ALERTS_ID = THREAD_CLIPS_ID = THREAD_NEWS_ID = undefined;
            !fs.existsSync(`./data/others/${LAST_POST_FILE}`) || fs.unlinkSync(`./data/others/${LAST_POST_FILE}`);
            !fs.existsSync(`./data/others/${LAST_CLIP_FILE}`) || fs.unlinkSync(`./data/others/${LAST_CLIP_FILE}`);
            lastClip = lastPost = '';
            wasLive = false;
            clearInterval(processAlerts);
            clearInterval(processClips);
            clearInterval(processNews);
            processAlerts = processNews = processClips = undefined;

            log('–ò–∑–º–µ–Ω—ë–Ω —á–∞—Ç/–∫–∞–Ω–∞–ª —Å', CHAT_ID, '–Ω–∞', chatid);
            log('–ü–æ—Ç–æ–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ undefined');
            CHAT_ID = chatid;
            ctx.editMessageText('‚úÖ–°–º–µ–Ω–∞ —á–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            break;

        case 'channel':
            action = 'channeledit';
            ctx.reply('–û–∫–µ–π, –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç\n' +
                '<b>üö®–í–ù–ò–ú–ê–ù–ò–ï!üö®</b>\n' +
                '–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —á–∞—Ç–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ò—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
                {
                    parse_mode: 'HTML'
                }
            );
            break;

        case 'channeledit':
            action = 'cancel';
            updateEnvVariable('TYPE_CHAT', 'channel');
            updateEnvVariable('CHAT_ID', chatid);

            updateEnvVariable('THREAD_ALERTS_ID', undefined);
            updateEnvVariable('THREAD_CLIPS_ID', undefined);
            updateEnvVariable('THREAD_NEWS_ID', undefined);
            THREAD_ALERTS_ID = THREAD_CLIPS_ID = THREAD_NEWS_ID = undefined;
            !fs.existsSync(`./data/others/${LAST_POST_FILE}`) || fs.unlinkSync(`./data/others/${LAST_POST_FILE}`);
            !fs.existsSync(`./data/others/${LAST_CLIP_FILE}`) || fs.unlinkSync(`./data/others/${LAST_CLIP_FILE}`);
            lastClip = lastPost = '';
            wasLive = false;
            clearInterval(processAlerts);
            clearInterval(processClips);
            clearInterval(processNews);

            ctx.reply('‚úÖ–°–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            if (TYPE_CHAT === 'group') {
                log('ID —á–∞—Ç–∞ –±—ã–ª —Å–º–µ–Ω–µ–Ω –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ —Å', CHAT_ID, '–Ω–∞', chatid);
            }
            else if (TYPE_CHAT === 'channel') {
                log('ID –∫–∞–Ω–∞–ª–∞ –±—ã–ª —Å–º–µ–Ω–µ–Ω —Å', CHAT_ID, '–Ω–∞', chatid);
            }
            CHAT_ID = chatid;
            TYPE_CHAT = 'channel';
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${chatType}`);
            break;
    }
});

function generatePhrase() {
    let length = 16,
        charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        retVal = "";
    for (let i = 0, n = charset.length; i < length; ++i) {
        retVal += charset.charAt(Math.floor(Math.random() * n));
    }
    return retVal;
}

function checkTwitch() {
    if (!CLIENT_ID && !CLIENT_SECRET && !TWITCH_USERNAME) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ twitch –Ω–µ –∑–∞–¥–∞–Ω—ã. ',
            button: [{ text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Twitch', callback_data: 'twitch' }]
        }
    }
    else if (!CLIENT_ID && !CLIENT_SECRET && !accessToken) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã –∏–ª–∏ —Å—Ä–æ–∫ –∏—Ö –∏—Å—Ç–µ–∫.',
            button: [{ text: '–ó–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã', callback_data: 'twitch:tokens' }]
        }
    }
    else if (!TWITCH_USERNAME) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.',
            button: [{ text: '–ó–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª', callback_data: 'twitch:channel' }]
        }
    }
    return {
        ok: true
    }
}

function checkNews() {
    if (!DOMAIN && !TELEGRAM_CHANNEL) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.',
            button: [{ text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–æ–≤', callback_data: 'forward' }]
        }
    }
    else if (!DOMAIN) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω.',
            button: [{ text: '–ó–∞–¥–∞—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞', callback_data: 'forward:rssbridge' }]
        }
    }
    else if (!TELEGRAM_CHANNEL) {
        return {
            ok: false,
            reason: '‚ö†Ô∏è–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω.',
            button: [{ text: '–ó–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª', callback_data: 'forward:telegramchannel' }]
        }
    }
    return {
        ok: true
    }
}

bot.action(/^chatsettings:threadnews:(.+)$/gi, ctx => {
    const settingType = ctx.match[1];
    switch (settingType) {
        case 'edit':
            action = 'cancel';
            updateEnvVariable('THREAD_NEWS_ID', threadId);
            THREAD_NEWS_ID = threadId;
            processNews ??= setInterval(checkNewPost, 60 * 1000);
            ctx.reply('‚úÖ–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω. –î–ª—è —Ç–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /testnews',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', THREAD_NEWS_ID);
            break;

        case 'on':
            updateEnvVariable('THREAD_NEWS_ID', 0);
            THREAD_NEWS_ID = 0;
            processNews ??= setInterval(checkNewPost, 60 * 1000);
            ctx.reply('üü¢–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞');
            break;

        case 'off':
            action = 'cancel';
            updateEnvVariable('THREAD_NEWS_ID', undefined);
            THREAD_NEWS_ID = undefined;
            clearInterval(processNews);
            processNews = undefined;
            !fs.existsSync(`./data/others/${LAST_POST_FILE}`) || fs.unlinkSync(`./data/others/${LAST_POST_FILE}`);
            lastPost = '';
            ctx.reply('üî¥–û—Ç–∫–ª—é—á–∏–ª –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–æ–≤',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingType}`);
            break;
    }
});

bot.action(/^chatsettings:threadalerts:(.+)$/gi, ctx => {
    const settingType = ctx.match[1];
    switch (settingType) {
        case 'edit':
            action = 'cancel';
            updateEnvVariable('THREAD_ALERTS_ID', threadId);
            THREAD_ALERTS_ID = threadId;
            processAlerts ??= setInterval(checkStream, 60 * 1000);
            ctx.reply('‚úÖ–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /testalerts',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', THREAD_ALERTS_ID);
            break;

        case 'on':
            updateEnvVariable('THREAD_ALERTS_ID', 0);
            THREAD_ALERTS_ID = 0;
            processAlerts ??= setInterval(checkStream, 60 * 1000);
            ctx.reply('üü¢–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ –≤–∫–ª—é—á–µ–Ω–∞',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ –≤–∫–ª—é—á–µ–Ω–∞');
            break;

        case 'off':
            action = 'cancel';
            updateEnvVariable('THREAD_ALERTS_ID', undefined);
            THREAD_ALERTS_ID = undefined;
            clearInterval(processAlerts);
            processAlerts = undefined;
            wasLive = false;
            ctx.reply('üî¥–û—Ç–∫–ª—é—á–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∞',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingType}`);
            break;
    }
});

bot.action(/^chatsettings:threadclips:(.+)$/gi, ctx => {
    const settingType = ctx.match[1];
    switch (settingType) {
        case 'edit':
            action = 'cancel';
            updateEnvVariable('THREAD_CLIPS_ID', threadId);
            THREAD_CLIPS_ID = threadId;
            processNews ??= setInterval(checkNewClip, 2 * 60 * 1000);
            ctx.reply('‚úÖ–ü–æ—Ç–æ–∫ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü–æ—Ç–æ–∫ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', THREAD_CLIPS_ID);
            break;

        case 'on':
            updateEnvVariable('THREAD_CLIPS_ID', 0);
            THREAD_CLIPS_ID = 0;
            processClips ??= setInterval(checkNewClip, 60 * 1000);
            ctx.reply('üü¢–ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞');
            break;

        case 'off':
            action = 'cancel';
            updateEnvVariable('THREAD_CLIPS_ID', undefined);
            THREAD_CLIPS_ID = undefined;
            clearInterval(processClips);
            processClips = undefined;
            !fs.existsSync(`./data/others/${LAST_CLIP_FILE}`) || fs.unlinkSync(`./data/others/${LAST_CLIP_FILE}`);
            lastClip = '';
            ctx.reply('üî¥–û—Ç–∫–ª—é—á–∏–ª –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞', callback_data: 'chatsettings' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingType}`);
            break;
    }
});

bot.action(/^chatsettings:(.+)$/gi, ctx => {
    const settingType = ctx.match[1];
    switch (settingType) {
        case 'chatchannel':
            ctx.editMessageText('–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ß–∞—Ç', callback_data: 'chatsettings:chatchannel:chat' }, { text: '–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª', callback_data: 'chatsettings:chatchannel:channel' }],
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data: 'chatsettings' }]
                        ]
                    }
                }
            );
            break;

        case 'threadalerts':
            let objAlerts = checkTwitch();
            if (!objAlerts.ok) {
                ctx.reply(objAlerts.reason, {
                    reply_markup: {
                        inline_keyboard: [
                            objAlerts.button
                        ]
                    }
                });
                return;
            }
            if (TYPE_CHAT === 'group') {
                action = 'threadalerts';
                phrase = generatePhrase();
                ctx.reply('–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å —Ñ—Ä–∞–∑—É, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∏–∂–µ, –≤ —Ç–æ—Ç –ø–æ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–•–æ—á—É –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö', callback_data: 'chatsettings:threadalerts:off' }]
                            ]
                        }
                    }
                );
            }
            else if (TYPE_CHAT === 'channel') {
                const flag = isNaN(THREAD_ALERTS_ID) ? 'on' : '';
                ctx.reply('–û–∫–µ–π, –Ω–∞–∂–º–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: flag ? '–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è' : '–í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data: `chatsettings:threadalerts:${flag || 'off'}` }]
                            ]
                        }
                    }
                );
            }
            break;

        case 'threadnews':
            let objNews = checkNews();
            if (!objNews.ok) {
                ctx.reply(objNews.reason, {
                    reply_markup: {
                        inline_keyboard: [
                            objNews.button
                        ]
                    }
                });
                return;
            }

            if (TYPE_CHAT === 'group') {
                phrase = generatePhrase();
                action = 'threadnews';
                ctx.reply('–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å —Ñ—Ä–∞–∑—É, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∏–∂–µ, –≤ —Ç–æ—Ç –ø–æ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–•–æ—á—É –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–æ–≤', callback_data: 'chatsettings:threadnews:off' }]
                            ]
                        }
                    }
                );
            }
            else if (TYPE_CHAT === 'channel') {
                const flag = isNaN(THREAD_NEWS_ID) ? 'on' : '';
                ctx.reply('–û–∫–µ–π, –Ω–∞–∂–º–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ—Å—Ç–æ–≤\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: flag ? '–í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É' : '–í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É', callback_data: `chatsettings:threadnews:${flag || 'off'}` }]
                            ]
                        }
                    }
                );
            }
            break;

        case 'threadclips':
            const obj = checkTwitch();
            if (!obj.ok) {
                ctx.reply(obj.reason, {
                    reply_markup: {
                        inline_keyboard: [
                            obj.button
                        ]
                    }
                });
                return;
            }

            if (TYPE_CHAT === 'group') {
                action = 'threadclips';
                phrase = generatePhrase();
                ctx.reply('–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å —Ñ—Ä–∞–∑—É, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∏–∂–µ, –≤ —Ç–æ—Ç –ø–æ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–ø—ã\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–•–æ—á—É –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤', callback_data: 'chatsettings:threadclips:off' }]
                            ]
                        }
                    }
                );
            }
            else if (TYPE_CHAT === 'channel') {
                const flag = isNaN(THREAD_CLIPS_ID) ? 'on' : '';
                ctx.reply('–û–∫–µ–π, –Ω–∞–∂–º–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤\n' +
                    '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel\n\n' +
                    `<code>${phrase}</code>`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: flag ? '–í–∫–ª—é—á–∏—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ' : '–í—ã–∫–ª—é—á–∏—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏–µ', callback_data: `chatsettings:threadclips:${flag || 'off'}` }]
                            ]
                        }
                    }
                );
            }
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingType}`);
            break;
    }
});

bot.on('my_chat_member', ctx => {
    const title = ctx.chat.title;
    chatid = ctx.chat.id;
    if (ctx.update.my_chat_member.new_chat_member.status === 'member' && action === 'chatedit') {
        bot.telegram.sendMessage(OWNER_ID, `–ß–∞—Ç: ${title}\nID: ${chatid}\n–í—Å—ë –≤–µ—Ä–Ω–æ?`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: `chatsettings:chatchannel:chatedit` }],
                    [{ text: '‚ùå–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ—Ç —á–∞—Ç', callback_data: 'chatsettings:chatchannel:chat' }]
                ]
            }
        });
    }
});

// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞. –ö–æ–Ω–µ—Ü =====================
// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≤–∏—á–æ–º =====================

bot.action('twitch', ctx => {
    const arrStars = ''.padEnd(25, '*');
    ctx.editMessageText('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Twitch\n\n' +
        `–ö–∞–Ω–∞–ª ${TWITCH_USERNAME}\n` +
        `ID –∫–ª–∏–µ–Ω—Ç–∞: ${CLIENT_ID.slice(0, 5)}${arrStars}\n` +
        `–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: ${CLIENT_SECRET.slice(0, 5)}${arrStars}\n\n` +
        '–¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n' + `<i>${mesAlerts ?? '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</i>`,
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data: 'twitch:channel' }, { text: '–°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã', callback_data: 'twitch:tokens' }],
                    [{ text: '–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data: 'twitch:alerts' }],
                    [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data: 'settings' }]
                ]
            }
        }
    );
});

bot.action(/twitch:(.+)/gi, ctx => {
    const settingsType = ctx.match[1];
    switch (settingsType) {
        case 'alerts':
            action = 'alertsedit';
            const text = mesAlerts ?? `–ü—Ä–∏–≤–µ—Ç! ${TWITCH_USERNAME} –Ω–∞—á–∞–ª(–∞) —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é`;
            ctx.reply('–û–∫–µ–π, –º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π.\n' +
                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏ /cancel\n\n' +
                `<code>${text}</code>`,
                {
                    parse_mode: 'HTML'
                }
            );
            break;

        case 'channel':
            action = 'ttvchanneledit';
            ctx.reply('–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è');
            break;

        case 'tokens':
            action = 'tokensedit';
            ctx.reply('–û–∫–µ–π, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ ID –∫–ª–∏–µ–Ω—Ç–∞. –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://dev.twitch.tv/console/apps\n' +
                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /cancel'
            );
            break;

        default:
            ctx.reply(`–í—ã–±—Ä–∞–Ω ${settingsType}`);
            break;
    }
});

// ==================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≤–∏—á–æ–º. –ö–æ–Ω–µ—Ü =====================

bot.on('message', async ctx => {
    if (['cancel', 'chatedit'].includes(action)) return;

    const value = ctx.update.message.text;
    switch (action) {
        case 'ttvchanneledit':
            updateEnvVariable('TWITCH_USERNAME', value);
            TWITCH_USERNAME = value;
            userId = await getUserId(value, CLIENT_ID, accessToken);
            await ctx.reply('‚úÖ–°–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.');
            log('–ë—ã–ª —Å–º–µ–Ω–µ–Ω —Ç–≤–∏—á –∫–∞–Ω–∞–ª –Ω–∞', value);
            break;

        case 'tokensedit':
            if (value.length !== 30) {
                await ctx.reply('‚ö†Ô∏è–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–ª–∏–Ω—É. –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤ –µ—â—ë —Ä–∞–∑')
                return;
            }
            client_id = value;
            await ctx.reply('–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–µ–∫—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
            action = 'tokenedit1';
            return;

        case 'tokenedit1':
            if (value.length !== 30) {
                await ctx.reply('‚ö†Ô∏è–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–ª–∏–Ω—É. –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤ –µ—â—ë —Ä–∞–∑')
                return;
            }
            ctx.reply('–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...');
            if (!(accessToken = await getAccessToken(client_id, value))) {
                await ctx.reply('–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –≤–µ—Ä–Ω—ã–µ. –í–≤–µ–¥–∏ ID –∫–ª–∏–µ–Ω—Ç–∞ —Å–Ω–æ–≤–∞');
                log('‚ùå–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ. –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
                action = 'tokensedit';
                return;
            }

            if (!TWITCH_USERNAME) {
                ctx.reply('‚ö†Ô∏è–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω. –≠—Ç–æ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã, ' +
                    '–æ–¥–Ω–∞–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª Twitch –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data: 'channel' }]
                            ]
                        }
                    });
            }

            userId ??= await getUserId(TWITCH_USERNAME, CLIENT_ID, accessToken);
            updateEnvVariable('CLIENT_ID', client_id);
            updateEnvVariable('CLIENT_SECRET', value);

            CLIENT_ID = client_id;
            CLIENT_SECRET = value;

            if (!isNaN(THREAD_ALERTS_ID))
                processAlerts ??= setInterval(checkStream, 60 * 1000);
            if (!isNaN(THREAD_CLIPS_ID))
                processClips ??= setInterval(checkNewClip, 60 * 1000 * 15);

            await ctx.reply('‚úÖ–°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Twitch', callback_data: 'twitch' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–¢–æ–∫–µ–Ω—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã');
            break;

        case 'alertsedit':
            saveLastData(ALERTS_MESSAGE_FILE, value);
            mesAlerts = value;
            await ctx.reply('‚úÖ–ó–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /testalerts',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Twitch', callback_data: 'twitch' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω');
            break;

        case 'threadnews':
        case 'threadclips':
        case 'threadalerts':
            if (value === phrase) {
                if (ctx.message.chat.id == CHAT_ID) {
                    const threadName = ctx.message.reply_to_message?.forum_topic_created.name;
                    threadId = ctx.message.message_thread_id ?? '0'
                    ctx.deleteMessage(ctx.message.message_id);
                    bot.telegram.sendMessage(OWNER_ID, `–ü–æ—Ç–æ–∫: ${threadName ?? 'General'}\n` +
                        `ID: ${threadId}\n` +
                        '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: `chatsettings:${action}:edit` }],
                                    [{ text: '‚ùå–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ—Ç –ø–æ—Ç–æ–∫', callback_data: `chatsettings:${action}` }]
                                ]
                            }
                        }
                    );
                }
            }
            break;

        case 'telegramchanneledit':
            if (!value.includes('https://t.me/')) {
                ctx.reply('‚ùå–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –í–≤–µ–¥–∏ –≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑');
                return;
            }

            TELEGRAM_CHANNEL = value.split('https://t.me/')[1];
            updateEnvVariable('TELEGRAM_CHANNEL', TELEGRAM_CHANNEL);
            !fs.existsSync(`./data/others/${LAST_POST_FILE}`) || fs.unlinkSync(`./data/others/${LAST_POST_FILE}`);
            lastPost = '';
            ctx.reply('‚úÖ–°–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤', callback_data: 'forward' }, { text: '‚è™–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: 'settings' }]
                        ]
                    }
                }
            );
            log('–ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', TELEGRAM_CHANNEL);
            break;

        case 'rssbridgeedit':
            DOMAIN = value;
            updateEnvVariable('DOMAIN', value);
            ctx.reply('‚úÖ–ò–∑–º–µ–Ω–µ–Ω –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ RSS-bridge');
            log('–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ RSS-bridge –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', value);
            break;

        case 'channeledit':
            const channel = ctx.update.message.forward_origin?.chat;
            if (!channel && channel?.type !== 'channel') {
                ctx.reply('‚ùå–≠—Ç–æ –Ω–µ –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞. –ü–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–π –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è')
                return;
            }
            chatid = channel.id;
            bot.telegram.sendMessage(OWNER_ID, `–ö–∞–Ω–∞–ª: ${channel.title}\n` +
                `ID: ${chatid}\n` +
                '–í—Å–µ –≤–µ—Ä–Ω–æ?',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: `chatsettings:chatchannel:${action}` }],
                            [{ text: '‚ùå–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∫–∞–Ω–∞–ª', callback_data: `chatsettings:chatchannel:${action.slice(0, action.length - 4)}` }]
                        ]
                    }
                }
            );
            break;

        default:
            bot.telegram.sendMessage(OWNER_ID, `‚ö†Ô∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª: ${action}`);
            log('–î–µ–π—Å—Ç–≤–∏–µ', action, '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return;
    }
    action = 'cancel';
});

async function main() {
    lastPost = loadLastData(LAST_POST_FILE);
    lastClip = loadLastData(LAST_CLIP_FILE);
    mesAlerts = loadLastData(ALERTS_MESSAGE_FILE);
    bot.launch();
    if (OWNER_ID)
        await bot.telegram.sendMessage(OWNER_ID, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

    if (!CHAT_ID && OWNER_ID)
        await bot.telegram.sendMessage(OWNER_ID, 'üö®–ß–∞—Ç –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª', callback_data: 'chatsettings:chatchannel' }]
                    ]
                }
            });

    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤
    if (!isNaN(THREAD_NEWS_ID) && THREAD_NEWS_ID) {
        checkNewPost();
        processNews = setInterval(checkNewPost, 60 * 1000 * 1); // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Å—Ç—ã —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    }

    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–≤–∏—á–æ–º
    if (CLIENT_ID && CLIENT_SECRET) {
        accessToken = await getAccessToken(CLIENT_ID, CLIENT_SECRET);

        if (accessToken && OWNER_ID) {
            userId = await getUserId(TWITCH_USERNAME, CLIENT_ID, accessToken);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–º–æ–≤
            if (!isNaN(THREAD_ALERTS_ID) && THREAD_ALERTS_ID) {
                checkStream();
                processAlerts = await setInterval(checkStream, 60 * 1000 * 1);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–ø–æ–≤
            if (!isNaN(THREAD_CLIPS_ID) && THREAD_CLIPS_ID) {
                checkNewClip();
                processClips = await setInterval(checkNewClip, 60 * 1000 * 2);
            }
        }
    }
    info();
}

// –ï—Å–ª–∏ –º–æ–¥—É–ª—å - main
if (require.main === module) {
    main();
}
